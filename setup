export CSLE_HOME=/home/aws/clse/
nano ~/.bashrc
export CSLE_HOME=/home/aws/clse/
source ~/.bashrc

sudo apt install -y make git bzip2
wget https://repo.anaconda.com/archive/Anaconda3-5.0.0-Linux-x86_64.sh
chmod u+x Anaconda3-5.0.0-Linux-x86_64.sh
./Anaconda3-5.0.0-Linux-x86_64.sh
source ~/.bashrc
git clone https://github.com/Limmen/csle
conda create -n csle python=3.9
conda activate csle




sudo mkdir /var/log/csle
sudo chmod -R u+rw /var/log/csle
sudo chown -R aws /var/log/csle


sudo mkdir /tmp/csle
sudo chmod -R u+rw /tmp/csle
sudo chown -R aws /tmp/csle

sudo visudo
aws ALL = NOPASSWD: /usr/sbin/service docker stop, /usr/sbin/service docker start, /usr/sbin/service docker restart, /usr/sbin/service nginx stop, /usr/sbin/service nginx start, /usr/sbin/service nginx restart, /usr/sbin/service postgresql start, /usr/sbin/service postgresql stop, /usr/sbin/service postgresql restart, /bin/kill, /usr/bin/journalctl -u docker.service -n 100 --no-pager -e

ssh-keygen


cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys



curl https://install.citusdata.com/community/deb.sh | sudo bash
sudo apt-get -y install postgresql-15-citus-11.2
sudo pg_conftool 15 main set shared_preload_libraries citus
sudo pg_conftool 15 main set listen_addresses '*'



sudo -u postgres psql  # start psql session
psql> \password postgres # set postgres password



sudo apt-get install build-essential libpq-dev
pip install torch numpy gym docker paramiko stable-baselines3 psycopg2 pyglet flask click waitress scp psutil grpcio grpcio-tools scipy confluent-kafka requests pyopenssl sphinx mypy mypy-extensions mypy-protobuf types-PyYAML types-protobuf types-paramiko types-requests types-urllib3 flake8 pytest gevent eventlet dnspython csle-ryu-fork gpytorch pulp Bayesian-optimization emukit cma pycryptodome




pg_hba conf. 
local   all             postgres                             trust

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     trust

# IPv4 local connections:
host    all             all             127.0.0.1/32            trust
host    all             all             192.168.189.139/24      trust


# IPv6 local connections:
host    all             all             ::1/128                 trust

# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     trust
host    replication     all             127.0.0.1/32            trust
host    replication     all             ::1/128                 trust

postgres.conf

listen_addresses = 'localhost,*'



sudo service postgresql restart
sudo update-rc.d postgresql enable

sudo chmod -R u+rw /var/log/postgresql
sudo chown -R aws /var/log/postgresql




Next, edit the file csle/metastore/create_cluster.sql and configure IP addresses of the worker servers and of the leader. Then, on the leader, run the following commands to setup the Citus cluster and create the tables:

cd metastore; make cluster
cd metastore; make tables




conda create -n py39 python=3.9
source activate python39
pip install csle-base csle-collector csle-ryu csle-common csle-attacker csle-defender csle-system-identification gym-csle-stopping-game csle-agents csle-rest-api csle-cli csle-cluster gym-csle-intrusion-response-game csle-tolerance gym-csle-apt-game gym-csle-cyborg



nstalling the Emulation System
The emulation system consists of a set of configuration files and a set of Docker images, which are divided into a set of “base images” and a set of “derived images”. The base images contain common functionality required by all images in CSLE whereas the derived images add specific configurations to the base images, e.g., specific vulnerabilities. To install the emulation system, the configuration files must be inserted into the metastore and the Docker images must be built or downloaded.

Start with adding Docker’s official GPG key to Ubuntu’s package manager by running the commands:

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
Listing 56: Commands to add Docker's official GPG key to Ubuntu's package manager.

Next, install Docker by running the commands:

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io
sudo groupadd docker
sudo usermod -aG docker $USER




ext, setup a docker swarm by running the following command on the leader:

docker swarm init --advertise-addr <ip address of the leader>
Listing 58: Command to initialize a Docker swarm.

After running the above command, a secret token will be returned. Use this token to run the following command on each worker to add it to the swarm:

docker swarm join --token <my_roken> leader_ip:2377
Listing 59: Commands to add a worker node to the Docker swarm.

You can verify the Docker swarm configuration by running docker node ls.

After completing the Docker installation, pull the base images of CSLE from DockerHub by running the commands:

cd emulation-system/base_images
make pull
Next, pull the derived images of CSLE from DockerHub by running the commands:

cd emulation-system/derived_images
make pull





Next, insert the emulation configurations into the metastore by running the commands on the leader node only:

cd emulation-system/envs
make install



A few configuration parameters of the kernel need to be updated to be able to execute emulations. In particular, the configuration variables max_map_count and max_user_watches need to be updated.

Update max_map_count by editing the file /etc/sysctl.conf and add the following line:

vm.max_map_count=262144
Listing 66: Line to add to `/etc/sysctl.conf`.

Alternatively, for a non-persistent configuration, run the command:

sysctl -w vm.max_map_count=262144
Listing 67: Command to update the configuration variable `max_map_count`.

You can check the configuration by running the command:

sysctl vm.max_map_count
Listing 68: Command to check the configuration of "`max_map_count`".

Finally, update max_user_watches by running the command:

echo fs.inotify.max_user_watches=524288 | \
     sudo tee -a /etc/sysctl.conf && \
     sudo sysctl -p


Start by installing node.js, its version manager nvm, and its package manager npm on the leader only by running the commands:

curl https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh --output nvm.sh
chmod u+rwx nvm.sh
./nvm.sh
Listing 70: Commands to install `node.js`, `nvm`, and `npm`.

Then setup the nvm environment variables by adding the following lines to .bashrc:

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"


nvm -v # Verify nvm installation
nvm install node # Install node
npm install -g npm # Update npm
node -v # Verify version of node
npm -v # Verify version of npm
Listing 72: Commands to install `node.js` and `npm`.

Next install and build the web application of the management system by running the following commands:

cd csle/management-system/csle-mgmt-webapp
npm install
npm run build
Listing 73: Commands to install the web application of the CSLE management system.

Next, install and start pgadmin on the leader by running the following commands:

docker pull dpage/pgadmin4
docker run -p 7778:80 -e "PGADMIN_DEFAULT_EMAIL=user@domain.com" -e "PGADMIN_DEFAULT_PASSWORD=SuperSecret" -d dpage/pgadmin4




Next, configure Nginx on the leader by editing the file:

/etc/nginx/sites-available/default
Listing 75: Nginx configuration file.

Replace the current configuration with the following:

server {
        listen 80 default_server;
        listen [::]:80 default_server;

        root /var/www/html;

        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location /pgadmin {
                proxy_set_header X-Script-Name /pgadmin;
                proxy_set_header Host $host;
                proxy_pass http://localhost:7778/;
                proxy_redirect off;
        }

        location / {
                proxy_pass http://localhost:7777/;
                proxy_buffering off;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Port $server_port;
        }
}




sudo service nginx restart


Open the file on each worker and replace the current configuration with the following (replace leader-ip with the actual ip):

server {
        listen 80 default_server;
        listen [::]:80 default_server;
        root /var/www/html;
        index index.html index.htm index.nginx-debian.html;
        server_name _;
        location /pgadmin {
                proxy_set_header X-Script-Name /pgadmin;
                proxy_set_header Host $host;
                proxy_pass http://leader-ip:7778/;
                proxy_redirect off;
        }

        location / {
                proxy_pass http://leader-ip:7777/;
                proxy_buffering off;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Port $server_port;
        }
}
Listing 81: Content of `/etc/nginx/sites-available/default` on a worker.

Next make the Nginx log files readable by your user by running the commands:

sudo chmod -R u+rw /var/log/nginx


sudo chown -R my_user /var/log/nginx
Listing 82: Commands to make the Nginx log files readable for a given user.

Lastly, restart Nginx on each worker and on the leader by running the command:

sudo service nginx restart
Listing 83: Command to restart Nginx.

After completing the steps above, install the web application and the monitoring services by running the commands:

cd management-system
chmod u+x install.sh
./install.sh
Listing 84: Commands to install the management system and associated tools.

Next, configure the IP of the leader by editing the following file on the leader:

csle/management-system/csle-mgmt-webapp/src
    /components/Common/serverIp.js
Listing 85: File to configure the IPs of servers in the management system.

Next, configure the port of the web interface on the leader by editing the file:

  csle/management-system/csle-mgmt-webapp/src
      /components/Common/serverPort.js



nano ~/.bashrc

export PATH=/home/aws/csle/management-system/csle-mgmt-webapp/src/components/Common:$PATH



source ~/.bashrc









